#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov  9 16:28:57 2021

@author: skilpatrick
"""
import math
from matplotlib import pyplot as plt

# STEP 1
parallax_stars_marcs = [35/2, 25/2, 40/2, 35/2, 25/2, 30/2, 40/2, 60/2, 40/2]
parallax_stars_pcs = []

# remember to indicate in the final write-up that star 1 had its parallax..  
# ..measurement off the page and generated 'bad data' therefore it was dropped from the dataset

for i in parallax_stars_marcs:
    j = i/1000 # divide angle by 1000 (since we took double theta to begin with)
    # dividing by 1000 converts miliarcseconds into arcseconds
    m = 1/j # convert to parsecs using given formula (approx. k = 1/tan(j))
    #k = k*(10**2) # convert into parsecs 
    parallax_stars_pcs.append(m) 
#print("distance of parallax stars in parsecs:", parallax_stars_pcs)

# DM = 5*log(d/10) for d distances in parallax_stars_pcs yileds "distance modulus"
# aka distance between apparent magnitude and absolute magnitude
parallax_dist_modulus = []
for i in parallax_stars_pcs:
    x = 5*math.log(i/10, 10)
    
    parallax_dist_modulus.append(x)
#print("DM for parallax stars:", parallax_dist_modulus)

# dictionary of 10 p_variable stars with average apparent magnitude (m in mags) and period (days)
# calculated the average apparent magnitude using WebPlotDigitizer.io
# calculated the period in days using a ruler and eyeballing the axes of each plot
p_variable_stars = {0: [2.3816, 1.25], 1: [0.1034, 15], 2: [0.5061, 4],
                    3: [2.1035, 1.6], 4: [1.0235, 5], 5: [-1.0510, 26], 6: [-2.7534, 55],
                    7: [-0.7436, 5], 8: [0.8009, 3.2]}

# recall DM = m - M for M = absolute magnitude and m = apparent magnitude (m found above)
# M = m - DM
M_pvar_stars = []
counter = 0
for i in parallax_dist_modulus:
    #print(x, '+', p_variable_stars[counter][0])
    x = p_variable_stars[counter][0] - i  # calculate M = m (p_variable_stars[counter][0]) - DM (i)
    M_pvar_stars.append(x) 
    counter += 1
#print("Absolute magnitude for p-var stars:", M_pvar_stars)

# make a plot showing log Period P vs absolute magnitude M for the 10 variable stars
xvals= [] # log period P of variable stars
counter = 0
for i in range(len(p_variable_stars)):
    x = math.log(p_variable_stars[counter][1], 10) # log base 10
    xvals.append(x)
    counter += 1

# fix discrepancy between pc and Mpc
def best_fit(xvals, yvals):

    xbar = sum(xvals)/len(xvals)
    ybar = sum(yvals)/len(yvals)
    n = len(xvals) # or len(Y)

    numer = sum([xi*yi for xi,yi in zip(xvals, yvals)]) - n * xbar * ybar
    denum = sum([xi**2 for xi in xvals]) - n * xbar**2

    b = numer / denum
    a = ybar - b * xbar
    #print('best fit line:\ny = {:.2f} + {:.2f}x'.format(a, b))
    return a, b
# solution
a, b = best_fit(xvals, M_pvar_stars)

# plot points and fit line
plt.scatter(xvals, M_pvar_stars)
plt.xlim(0, 2)
plt.ylim(-8, 0)
plt.xlabel('Log Base 10 of Period P in Days of Variable Stars 0-9')
plt.ylabel('Absolute Magnitude')
plt.title('Period vs. Absolute Magnitude for Variable Stars 0-9 \n With Red Dots as Absolute Magnitude of the SN Variable Stars \n Given Our Best Fit Line')
yfit = [a + b * xi for xi in xvals]
plt.plot(xvals, yfit)

#%%
# STEP 2
"""
First, look at the files ‘SN_variable_N.pdf.’ 
They show the light curves for the variable stars within the same galaxies as the SN. 
These results will be noisier than before, because these stars are much further away. 
Once again measure the period and the average apparent magnitude for each variable star. 
From this, you will get the absolute magnitude from Step 1— 
use your best fit line relating logP vs M, and your new measurements of logP to infer the new M. 
Then determine the distance modulus for each star (and thus the galaxy that star lives in).
"""

# now we have m in apparent magnitude and P in days for SN variable stars
#SN_variable_stars = {0: [23.2929, 12], 1: [23.4886, 2.4], 2: [22.9054, 26], 
#                     3: [23.2245, 40], 4: [27.2446, 2.5], 5: [23.5308, 40],
#                     6: [23.0505, 13], 7: [26.3689, 5.5], 8: [24.3486, 3.6]}

SN_variable_stars = {0: [23.2929, 12], 1: [23.4584, 2.5], 2: [22.8858, 28], 
                     3: [23.2455, 65], 4: [27.2424, 2.6], 5: [23.5161, 40],
                     6: [23.0361, 13], 7: [26.3677, 5.75], 8: [24.3006, 3.5]}

# calculate log(p) for the SN variable stars
logp_snvar = []
counter = 0
for i in SN_variable_stars:
    #print(x, '+', p_variable_stars[counter][0])
    x = math.log(SN_variable_stars[counter][1], 10) # calculate M = DM (i) + m (p_variable_stars[counter][0])
    logp_snvar.append(x) 
    counter += 1

# calculate M for the SN variable stars using our previous best fit line
bigM_snvar = []
for i in logp_snvar:
    y = -1.22 + -2.86*(i)
    bigM_snvar.append(y) # absolute magnitude of SN variable stars given by PM relation line and SN variable star logP
#print("Absolute magnitude of SN variable stars:", bigM_snvar)

# ORANGE DOTS - our inputs are log(p) and our outputs will be the absolute magnitude
plt.scatter(logp_snvar, bigM_snvar)
plt.show() 

# recall DM = m - M where M is the values in bigM_snvar and m is the values in SN_variable_stars[counter][0]
# calculate DM for SN variable stars using M = m - DM since DM = m - M
DM_snvar = []
counter = 0
for i in bigM_snvar:
    DM = SN_variable_stars[counter][0] - i
    DM_snvar.append(DM)
    counter += 1
#print("DM of SN variable stars", DM_snvar)
"""
# calculate d from DM for SN variable stars
d_snvar = []
for i in DM_snvar: 
    x = 10*(10**(i/5))
    d_snvar.append(x)
print("d for SN variable stars:", d_snvar)
"""
# list of calibration SN peak apparent magnitudes
#max_sncalibrations_apparent = [27.5, 25.5, 28, 28.5, 29, 28.5, 27.5, 29.75, 26]
max_sncalibrations_apparent = [6, 4, 6, 7, 7.5, 7, 6, 8, 4]

# convert to peak absolute magnitude using DM values from variable stars
# assuming DM values come from DM_snvar and not parallax_dist_modulus
# M = m - DM
counter = 0
bigM_sncalibrations = []
for i in max_sncalibrations_apparent:
    M = i - DM_snvar[counter]
    # print(M, "=", i, "-", DM_snvar[counter])
    bigM_sncalibrations.append(M)
    counter += 1
#print("Absolute Magnitude of calibration SN's:", bigM_sncalibrations)
avg_intrinsic_SN = sum(bigM_sncalibrations)/len(bigM_sncalibrations)
#print("average of 10 peak absolute magnitudes:", avg_intrinsic_SN) #-0.4001909219034927 (a really bright galaxy should be around -20-ish)

#%%
# STEP 3

"""
Determine the peak apparent magnitude of each faint SN 
and calculate the DM from the now-known peak absolute magnitude of all SN from the previous step. 
You have been given a blank plot with redshift z on x-axis and distance, on log (d/Mpc) on the y-axis. 

Note that the y-axis is logarithmic and assume distance is in Mpc. 
This file is called “hubble_diagram.pdf”.
"""

#faintSN_peak_m = [40.25, 40.25, 38.25, 42, 40, 41, 40, 41, 42.5, 40.5, 38.5, 42.5, 43, 41, 39, 40, 42, 41.5, 40.5, 39.5]
faintSN_peak_m = [19, 20.5, 17, 21, 19.5, 20, 20, 21, 22, 21, 18, 21.5, 22, 20.5, 19, 19.5, 20, 21, 19.5, 19]
# calculate DM using DM = m - M
faintSN_DM = []
for i in faintSN_peak_m:
    DM =  i - avg_intrinsic_SN
    #print(avg_intrinsic_SN, "-", i)
    faintSN_DM.append(DM)
#print("DM of faint SN:", faintSN_DM)

logdperpc = []
mpc = 10
for i in faintSN_DM: # this gives us distance in parsecs
    x = (i/5) - 5
    logdperpc.append(x)
#print("log distance per megaparsec:", logdperpc)

# use log rules subtract by 6 to convert to megaparsecs

# DM/5 = log(d/10) [parsecs]
# DM/5 + 1 - 6 = log(d)  [convert to mpc]
# 10^(DM/5 - 5) = d
# (?)
# the hubble plot has log (d/pc) on its y axis
# we can measure this same value using formula DM = 5*log(d/pc) (in parsecs)
# notes from office hours:
    ## first calculate distance in parsecs

faintSN_redshifts = [0.381, 0.559, 0.240, 0.852, 0.356, 0.437, 0.396, 0.656, 0.884, 0.572, 0.340, 0.649, 0.965, 0.588, 0.349, 0.395, 0.834, 0.599, 0.392, 0.249]
hubblexvals = [0.001,0.002,0.003,0.004,0.005,0.006,0.007,0.008,0.009,0.01,0.011,0.012,0.013,0.014,0.015,0.016,0.017,0.018,0.019,0.02,0.021,0.022,0.023,0.024,0.025,0.026,0.027,0.028,0.029,0.03,0.031,0.032,0.033,0.034,0.035,0.036,0.037,0.038,0.039,0.04,0.041,0.042,0.043,0.044,0.045,0.046,0.047,0.048,0.049,0.05,0.051,0.052,0.053,0.054,0.055,0.056,0.057,0.058,0.059,0.06,0.061,0.062,0.063,0.064,0.065,0.066,0.067,0.068,0.069,0.07,0.071,0.072,0.073,0.074,0.075,0.076,0.077,0.078,0.079,0.08,0.081,0.082,0.083,0.084,0.085,0.086,0.087,0.088,0.089,0.09,0.091,0.092,0.093,0.094,0.095,0.096,0.097,0.098,0.099,0.1,0.101,0.102,0.103,0.104,0.105,0.106,0.107,0.108,0.109,0.11,0.111,0.112,0.113,0.114,0.115,0.116,0.117,0.118,0.119,0.12,0.121,0.122,0.123,0.124,0.125,0.126,0.127,0.128,0.129,0.13,0.131,0.132,0.133,0.134,0.135,0.136,0.137,0.138,0.139,0.14,0.141,0.142,0.143,0.144,0.145,0.146,0.147,0.148,0.149,0.15,0.151,0.152,0.153,0.154,0.155,0.156,0.157,0.158,0.159,0.16,0.161,0.162,0.163,0.164,0.165,0.166,0.167,0.168,0.169,0.17,0.171,0.172,0.173,0.174,0.175,0.176,0.177,0.178,0.179,0.18,0.181,0.182,0.183,0.184,0.185,0.186,0.187,0.188,0.189,0.19,0.191,0.192,0.193,0.194,0.195,0.196,0.197,0.198,0.199,0.2,0.201,0.202,0.203,0.204,0.205,0.206,0.207,0.208,0.209,0.21,0.211,0.212,0.213,0.214,0.215,0.216,0.217,0.218,0.219,0.22,0.221,0.222,0.223,0.224,0.225,0.226,0.227,0.228,0.229,0.23,0.231,0.232,0.233,0.234,0.235,0.236,0.237,0.238,0.239,0.24,0.241,0.242,0.243,0.244,0.245,0.246,0.247,0.248,0.249,0.25,0.251,0.252,0.253,0.254,0.255,0.256,0.257,0.258,0.259,0.26,0.261,0.262,0.263,0.264,0.265,0.266,0.267,0.268,0.269,0.27,0.271,0.272,0.273,0.274,0.275,0.276,0.277,0.278,0.279,0.28,0.281,0.282,0.283,0.284,0.285,0.286,0.287,0.288,0.289,0.29,0.291,0.292,0.293,0.294,0.295,0.296,0.297,0.298,0.299,0.3,0.301,0.302,0.303,0.304,0.305,0.306,0.307,0.308,0.309,0.31,0.311,0.312,0.313,0.314,0.315,0.316,0.317,0.318,0.319,0.32,0.321,0.322,0.323,0.324,0.325,0.326,0.327,0.328,0.329,0.33,0.331,0.332,0.333,0.334,0.335,0.336,0.337,0.338,0.339,0.34,0.341,0.342,0.343,0.344,0.345,0.346,0.347,0.348,0.349,0.35,0.351,0.352,0.353,0.354,0.355,0.356,0.357,0.358,0.359,0.36,0.361,0.362,0.363,0.364,0.365,0.366,0.367,0.368,0.369,0.37,0.371,0.372,0.373,0.374,0.375,0.376,0.377,0.378,0.379,0.38,0.381,0.382,0.383,0.384,0.385,0.386,0.387,0.388,0.389,0.39,0.391,0.392,0.393,0.394,0.395,0.396,0.397,0.398,0.399,0.4,0.401,0.402,0.403,0.404,0.405,0.406,0.407,0.408,0.409,0.41,0.411,0.412,0.413,0.414,0.415,0.416,0.417,0.418,0.419,0.42,0.421,0.422,0.423,0.424,0.425,0.426,0.427,0.428,0.429,0.43,0.431,0.432,0.433,0.434,0.435,0.436,0.437,0.438,0.439,0.44,0.441,0.442,0.443,0.444,0.445,0.446,0.447,0.448,0.449,0.45,0.451,0.452,0.453,0.454,0.455,0.456,0.457,0.458,0.459,0.46,0.461,0.462,0.463,0.464,0.465,0.466,0.467,0.468,0.469,0.47,0.471,0.472,0.473,0.474,0.475,0.476,0.477,0.478,0.479,0.48,0.481,0.482,0.483,0.484,0.485,0.486,0.487,0.488,0.489,0.49,0.491,0.492,0.493,0.494,0.495,0.496,0.497,0.498,0.499,0.5,0.501,0.502,0.503,0.504,0.505,0.506,0.507,0.508,0.509,0.51,0.511,0.512,0.513,0.514,0.515,0.516,0.517,0.518,0.519,0.52,0.521,0.522,0.523,0.524,0.525,0.526,0.527,0.528,0.529,0.53,0.531,0.532,0.533,0.534,0.535,0.536,0.537,0.538,0.539,0.54,0.541,0.542,0.543,0.544,0.545,0.546,0.547,0.548,0.549,0.55,0.551,0.552,0.553,0.554,0.555,0.556,0.557,0.558,0.559,0.56,0.561,0.562,0.563,0.564,0.565,0.566,0.567,0.568,0.569,0.57,0.571,0.572,0.573,0.574,0.575,0.576,0.577,0.578,0.579,0.58,0.581,0.582,0.583,0.584,0.585,0.586,0.587,0.588,0.589,0.59,0.591,0.592,0.593,0.594,0.595,0.596,0.597,0.598,0.599,0.6,0.601,0.602,0.603,0.604,0.605,0.606,0.607,0.608,0.609,0.61,0.611,0.612,0.613,0.614,0.615,0.616,0.617,0.618,0.619,0.62,0.621,0.622,0.623,0.624,0.625,0.626,0.627,0.628,0.629,0.63,0.631,0.632,0.633,0.634,0.635,0.636,0.637,0.638,0.639,0.64,0.641,0.642,0.643,0.644,0.645,0.646,0.647,0.648,0.649,0.65,0.651,0.652,0.653,0.654,0.655,0.656,0.657,0.658,0.659,0.66,0.661,0.662,0.663,0.664,0.665,0.666,0.667,0.668,0.669,0.67,0.671,0.672,0.673,0.674,0.675,0.676,0.677,0.678,0.679,0.68,0.681,0.682,0.683,0.684,0.685,0.686,0.687,0.688,0.689,0.69,0.691,0.692,0.693,0.694,0.695,0.696,0.697,0.698,0.699,0.7,0.701,0.702,0.703,0.704,0.705,0.706,0.707,0.708,0.709,0.71,0.711,0.712,0.713,0.714,0.715,0.716,0.717,0.718,0.719,0.72,0.721,0.722,0.723,0.724,0.725,0.726,0.727,0.728,0.729,0.73,0.731,0.732,0.733,0.734,0.735,0.736,0.737,0.738,0.739,0.74,0.741,0.742,0.743,0.744,0.745,0.746,0.747,0.748,0.749,0.75,0.751,0.752,0.753,0.754,0.755,0.756,0.757,0.758,0.759,0.76,0.761,0.762,0.763,0.764,0.765,0.766,0.767,0.768,0.769,0.77,0.771,0.772,0.773,0.774,0.775,0.776,0.777,0.778,0.779,0.78,0.781,0.782,0.783,0.784,0.785,0.786,0.787,0.788,0.789,0.79,0.791,0.792,0.793,0.794,0.795,0.796,0.797,0.798,0.799,0.8,0.801,0.802,0.803,0.804,0.805,0.806,0.807,0.808,0.809,0.81,0.811,0.812,0.813,0.814,0.815,0.816,0.817,0.818,0.819,0.82,0.821,0.822,0.823,0.824,0.825,0.826,0.827,0.828,0.829,0.83,0.831,0.832,0.833,0.834,0.835,0.836,0.837,0.838,0.839,0.84,0.841,0.842,0.843,0.844,0.845,0.846,0.847,0.848,0.849,0.85,0.851,0.852,0.853,0.854,0.855,0.856,0.857,0.858,0.859,0.86,0.861,0.862,0.863,0.864,0.865,0.866,0.867,0.868,0.869,0.87,0.871,0.872,0.873,0.874,0.875,0.876,0.877,0.878,0.879,0.88,0.881,0.882,0.883,0.884,0.885,0.886,0.887,0.888,0.889,0.89,0.891,0.892,0.893,0.894,0.895,0.896,0.897,0.898,0.899,0.9,0.901,0.902,0.903,0.904,0.905,0.906,0.907,0.908,0.909,0.91,0.911,0.912,0.913,0.914,0.915,0.916,0.917,0.918,0.919,0.92,0.921,0.922,0.923,0.924,0.925,0.926,0.927,0.928,0.929,0.93,0.931,0.932,0.933,0.934,0.935,0.936,0.937,0.938,0.939,0.94,0.941,0.942,0.943,0.944,0.945,0.946,0.947,0.948,0.949,0.95,0.951,0.952,0.953,0.954,0.955,0.956,0.957,0.958,0.959,0.96,0.961,0.962,0.963,0.964,0.965,0.966,0.967,0.968,0.969,0.97,0.971,0.972,0.973,0.974,0.975,0.976,0.977,0.978,0.979,0.98,0.981,0.982,0.983,0.984,0.985,0.986,0.987,0.988,0.989,0.99,0.991,0.992,0.993,0.994,0.995,0.996,0.997,0.998,0.999,1]
hubbleyvals = [0.4771,0.7784,0.9547,1.08,1.177,1.256,1.324,1.382,1.433,1.479,1.521,1.559,1.594,1.626,1.656,1.684,1.711,1.736,1.76,1.782,1.804,1.824,1.844,1.862,1.88,1.897,1.914,1.93,1.945,1.96,1.975,1.989,2.002,2.016,2.028,2.041,2.053,2.065,2.076,2.087,2.098,2.109,2.119,2.13,2.14,2.149,2.159,2.168,2.177,2.186,2.195,2.204,2.212,2.221,2.229,2.237,2.245,2.253,2.26,2.268,2.275,2.282,2.289,2.296,2.303,2.31,2.317,2.324,2.33,2.337,2.343,2.349,2.355,2.362,2.368,2.374,2.379,2.385,2.391,2.397,2.402,2.408,2.413,2.419,2.424,2.429,2.434,2.44,2.445,2.45,2.455,2.46,2.465,2.469,2.474,2.479,2.484,2.488,2.493,2.497,2.502,2.506,2.511,2.515,2.52,2.524,2.528,2.532,2.537,2.541,2.545,2.549,2.553,2.557,2.561,2.565,2.569,2.573,2.577,2.58,2.584,2.588,2.592,2.595,2.599,2.603,2.606,2.61,2.614,2.617,2.621,2.624,2.628,2.631,2.634,2.638,2.641,2.645,2.648,2.651,2.654,2.658,2.661,2.664,2.667,2.671,2.674,2.677,2.68,2.683,2.686,2.689,2.692,2.695,2.698,2.701,2.704,2.707,2.71,2.713,2.716,2.719,2.721,2.724,2.727,2.73,2.733,2.736,2.738,2.741,2.744,2.746,2.749,2.752,2.755,2.757,2.76,2.762,2.765,2.768,2.77,2.773,2.775,2.778,2.78,2.783,2.785,2.788,2.79,2.793,2.795,2.798,2.8,2.803,2.805,2.807,2.81,2.812,2.815,2.817,2.819,2.822,2.824,2.826,2.829,2.831,2.833,2.835,2.838,2.84,2.842,2.844,2.847,2.849,2.851,2.853,2.855,2.858,2.86,2.862,2.864,2.866,2.868,2.87,2.872,2.875,2.877,2.879,2.881,2.883,2.885,2.887,2.889,2.891,2.893,2.895,2.897,2.899,2.901,2.903,2.905,2.907,2.909,2.911,2.913,2.915,2.917,2.919,2.921,2.922,2.924,2.926,2.928,2.93,2.932,2.934,2.936,2.937,2.939,2.941,2.943,2.945,2.947,2.948,2.95,2.952,2.954,2.956,2.957,2.959,2.961,2.963,2.964,2.966,2.968,2.97,2.971,2.973,2.975,2.977,2.978,2.98,2.982,2.983,2.985,2.987,2.988,2.99,2.992,2.993,2.995,2.997,2.998,3,3.002,3.003,3.005,3.007,3.008,3.01,3.011,3.013,3.015,3.016,3.018,3.019,3.021,3.022,3.024,3.026,3.027,3.029,3.03,3.032,3.033,3.035,3.036,3.038,3.039,3.041,3.042,3.044,3.045,3.047,3.048,3.05,3.051,3.053,3.054,3.056,3.057,3.059,3.06,3.062,3.063,3.065,3.066,3.068,3.069,3.07,3.072,3.073,3.075,3.076,3.078,3.079,3.08,3.082,3.083,3.085,3.086,3.087,3.089,3.09,3.091,3.093,3.094,3.096,3.097,3.098,3.1,3.101,3.102,3.104,3.105,3.106,3.108,3.109,3.11,3.112,3.113,3.114,3.116,3.117,3.118,3.12,3.121,3.122,3.123,3.125,3.126,3.127,3.129,3.13,3.131,3.132,3.134,3.135,3.136,3.138,3.139,3.14,3.141,3.143,3.144,3.145,3.146,3.148,3.149,3.15,3.151,3.152,3.154,3.155,3.156,3.157,3.159,3.16,3.161,3.162,3.163,3.165,3.166,3.167,3.168,3.169,3.171,3.172,3.173,3.174,3.175,3.176,3.178,3.179,3.18,3.181,3.182,3.183,3.185,3.186,3.187,3.188,3.189,3.19,3.191,3.193,3.194,3.195,3.196,3.197,3.198,3.199,3.201,3.202,3.203,3.204,3.205,3.206,3.207,3.208,3.209,3.211,3.212,3.213,3.214,3.215,3.216,3.217,3.218,3.219,3.22,3.221,3.223,3.224,3.225,3.226,3.227,3.228,3.229,3.23,3.231,3.232,3.233,3.234,3.235,3.236,3.237,3.238,3.239,3.241,3.242,3.243,3.244,3.245,3.246,3.247,3.248,3.249,3.25,3.251,3.252,3.253,3.254,3.255,3.256,3.257,3.258,3.259,3.26,3.261,3.262,3.263,3.264,3.265,3.266,3.267,3.268,3.269,3.27,3.271,3.272,3.273,3.274,3.275,3.276,3.277,3.278,3.279,3.28,3.281,3.282,3.283,3.284,3.285,3.286,3.286,3.287,3.288,3.289,3.29,3.291,3.292,3.293,3.294,3.295,3.296,3.297,3.298,3.299,3.3,3.301,3.302,3.303,3.303,3.304,3.305,3.306,3.307,3.308,3.309,3.31,3.311,3.312,3.313,3.314,3.314,3.315,3.316,3.317,3.318,3.319,3.32,3.321,3.322,3.323,3.324,3.324,3.325,3.326,3.327,3.328,3.329,3.33,3.331,3.332,3.332,3.333,3.334,3.335,3.336,3.337,3.338,3.339,3.339,3.34,3.341,3.342,3.343,3.344,3.345,3.345,3.346,3.347,3.348,3.349,3.35,3.351,3.351,3.352,3.353,3.354,3.355,3.356,3.357,3.357,3.358,3.359,3.36,3.361,3.362,3.362,3.363,3.364,3.365,3.366,3.367,3.367,3.368,3.369,3.37,3.371,3.372,3.372,3.373,3.374,3.375,3.376,3.376,3.377,3.378,3.379,3.38,3.381,3.381,3.382,3.383,3.384,3.385,3.385,3.386,3.387,3.388,3.389,3.389,3.39,3.391,3.392,3.392,3.393,3.394,3.395,3.396,3.396,3.397,3.398,3.399,3.4,3.4,3.401,3.402,3.403,3.403,3.404,3.405,3.406,3.407,3.407,3.408,3.409,3.41,3.41,3.411,3.412,3.413,3.413,3.414,3.415,3.416,3.416,3.417,3.418,3.419,3.42,3.42,3.421,3.422,3.423,3.423,3.424,3.425,3.426,3.426,3.427,3.428,3.428,3.429,3.43,3.431,3.431,3.432,3.433,3.434,3.434,3.435,3.436,3.437,3.437,3.438,3.439,3.44,3.44,3.441,3.442,3.442,3.443,3.444,3.445,3.445,3.446,3.447,3.447,3.448,3.449,3.45,3.45,3.451,3.452,3.452,3.453,3.454,3.455,3.455,3.456,3.457,3.457,3.458,3.459,3.46,3.46,3.461,3.462,3.462,3.463,3.464,3.464,3.465,3.466,3.466,3.467,3.468,3.469,3.469,3.47,3.471,3.471,3.472,3.473,3.473,3.474,3.475,3.475,3.476,3.477,3.477,3.478,3.479,3.48,3.48,3.481,3.482,3.482,3.483,3.484,3.484,3.485,3.486,3.486,3.487,3.488,3.488,3.489,3.49,3.49,3.491,3.492,3.492,3.493,3.494,3.494,3.495,3.496,3.496,3.497,3.498,3.498,3.499,3.499,3.5,3.501,3.501,3.502,3.503,3.503,3.504,3.505,3.505,3.506,3.507,3.507,3.508,3.509,3.509,3.51,3.511,3.511,3.512,3.512,3.513,3.514,3.514,3.515,3.516,3.516,3.517,3.518,3.518,3.519,3.519,3.52,3.521,3.521,3.522,3.523,3.523,3.524,3.524,3.525,3.526,3.526,3.527,3.528,3.528,3.529,3.529,3.53,3.531,3.531,3.532,3.533,3.533,3.534,3.534,3.535,3.536,3.536,3.537,3.537,3.538,3.539,3.539,3.54,3.54,3.541,3.542,3.542,3.543,3.544,3.544,3.545,3.545,3.546,3.547,3.547,3.548,3.548,3.549,3.55,3.55,3.551,3.551,3.552,3.553,3.553,3.554,3.554,3.555,3.555,3.556,3.557,3.557,3.558,3.558,3.559,3.56,3.56,3.561,3.561,3.562,3.563,3.563,3.564,3.564,3.565,3.565,3.566,3.567,3.567,3.568,3.568,3.569,3.57,3.57,3.571,3.571,3.572,3.572,3.573,3.574,3.574,3.575,3.575,3.576,3.576,3.577,3.578,3.578,3.579,3.579,3.58,3.58,3.581,3.582,3.582,3.583,3.583,3.584,3.584,3.585,3.586,3.586,3.587,3.587,3.588,3.588,3.589,3.589,3.59,3.591,3.591,3.592,3.592,3.593,3.593,3.594,3.594,3.595,3.596,3.596,3.597,3.597,3.598,3.598,3.599,3.599,3.6,3.6,3.601,3.602,3.602,3.603,3.603,3.604,3.604,3.605,3.605,3.606,3.606,3.607,3.608,3.608,3.609,3.609,3.61,3.61,3.611,3.611,3.612,3.612,3.613,3.613,3.614,3.615,3.615,3.616,3.616,3.617,3.617,3.618,3.618,3.619]
plt.plot(hubblexvals, hubbleyvals)
plt.scatter(faintSN_redshifts, faintSN_DM, color = 'blue')
plt.scatter(faintSN_redshifts, logdperpc)
plt.xlim(0, 1)
plt.ylim(0, 5)
plt.title("Faint SN Distance Modulus as a Function of Faint SN Redshifts")
plt.xlabel("z [redshift]")
plt.ylabel("log d/Mpc")
plt.show()
